package com.sample.farza.moveit.barcodegeneration;

/**
 * Created by farzaali on 5/20/16.
 */

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.text.ClipboardManager;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.sample.farza.moveit.R;
import com.sample.farza.moveit.printpdf.FileOperations;
import com.sample.farza.moveit.printpdf.PrintDialogActivity;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

//import android.content.ClipboardManager;

public class QRActivity extends Activity {

    private String TAG = "farza";

    FileOperations fileOperations;

    //library imageloader
    ImageLoader imgLoader;
    ImageView qrImg;

    //what we get out of the clipboard
    String copiedStr;

    //where we out clipboard text into
    TextView qrTxt;
    ClipboardManager clipboard;

    //url to google qr server
    //we download this qr to show to the user
    String BASE_QR_URL = "http://chart.apis.google.com/chart?cht=qr&chs=400x400&chld=M&choe=UTF-8&chl=";

    //base url plus the text that we get from the clipboard
    String fullUrl = BASE_QR_URL;

    Button printButton;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_qr);

        //from the library
        //gives image loader configuration object
        ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(this).build();
        imgLoader = ImageLoader.getInstance();
        imgLoader.init(config);

        qrImg = (ImageView)findViewById(R.id.qrImg);
        qrTxt = (TextView)findViewById(R.id.qrTxt);

        clipboard = (ClipboardManager)getSystemService(Context.CLIPBOARD_SERVICE);
        /*
         * clipboard.getText() is now deprecated. But I am going to use it here
         * because the new way of doing the same thing only works on API lvl 11+
         * Since I want this application to support API lvl 4+ we have to use
         * the old method.
         */
        //
        fileOperations = new FileOperations();
       // CharSequence clipTxt = clipboard.getText();
        CharSequence clipTxt = fileOperations.read();

        //This is the new, non-deprecated way of getting text from the Clipboard.
        //CharSequence clipTxt = clipboard.getPrimaryClip().getItemAt(0).getText();


        //If the clipboard has text, and it is more than 0 characters.
        if((null != clipTxt) && (clipTxt.length() > 0)){
            try {
                qrTxt.setText(clipTxt);
                copiedStr = clipTxt.toString();

                //url encode the copied string just in case the user has some things that arent allowed in urls
                //because we are sending this text that we get from the clipboard back to the google api
                //it accepts only url encoded text
                //throws error if there are spaces
                fullUrl += URLEncoder.encode(copiedStr, "UTF-8");

                SendfeedbackJob job = new SendfeedbackJob(fullUrl);
                job.execute();

                //dispplay the image that is generated by the google api in the image loader in xml
                imgLoader.displayImage(fullUrl, qrImg);

            } catch (UnsupportedEncodingException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

        }else{ //If no text display a dialog.
            AlertDialog.Builder builder = new AlertDialog.Builder(this);

            builder.setTitle("QRMaker")
                    .setCancelable(true)
                    .setMessage("There was no data in the clipboard! Go copy something and come back")
                    .setIcon(R.drawable.nuke)
                    .setNeutralButton("Okay", new OnClickListener() {

                        @Override
                        public void onClick(DialogInterface arg0, int arg1) {
                            finish();

                        }

                    });

            AlertDialog diag = builder.create();
            diag.show();
        }

        printButton = (Button)findViewById(R.id.printQRButton);
   printButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                //Intent printIntent = new Intent(NewMoveActivity.this, PrintDialogActivity.class);
                Intent printIntent = new Intent(QRActivity.this, PrintDialogActivity.class);
                //docUri - URI of the document to be printed
                //docMimeType - MIME type of the document to be printed. We recommend that you use PDF (application/pdf) format
                //docTitle - title of the printed document, arbitrary string that will be shown on the GCP management console as the print job's title


                Uri myUri = Uri.parse("file://" + Environment.getExternalStorageDirectory().getAbsolutePath() + "/abc/testPNG.png");

                printIntent.setDataAndType(myUri, "image/png");
                printIntent.putExtra("title", "Moving List");
                startActivity(printIntent);
            }
        });
    }


}

